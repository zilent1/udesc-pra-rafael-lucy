/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Source fragment for the Clownfish runtime's charmonizer.c.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Charmonizer/Probe.h"
#include "Charmonizer/Probe/AtomicOps.h"
#include "Charmonizer/Probe/BuildEnv.h"
#include "Charmonizer/Probe/DirManip.h"
#include "Charmonizer/Probe/Floats.h"
#include "Charmonizer/Probe/FuncMacro.h"
#include "Charmonizer/Probe/Headers.h"
#include "Charmonizer/Probe/Integers.h"
#include "Charmonizer/Probe/LargeFiles.h"
#include "Charmonizer/Probe/Memory.h"
#include "Charmonizer/Probe/SymbolVisibility.h"
#include "Charmonizer/Probe/VariadicMacros.h"
#include "Charmonizer/Core/HeaderChecker.h"
#include "Charmonizer/Core/CLI.h"
#include "Charmonizer/Core/ConfWriter.h"
#include "Charmonizer/Core/ConfWriterC.h"
#include "Charmonizer/Core/ConfWriterPerl.h"
#include "Charmonizer/Core/ConfWriterRuby.h"

typedef struct cfish_MakeFile {
    chaz_MakeFile *makefile;
    chaz_CLI      *cli;

    /* Directories and files. */
    const char  *base_dir;
    const char  *host_src_dir;
    char        *core_dir;
    char        *autogen_src_dir;
    char        *autogen_inc_dir;
    char        *autogen_target;
    const char **autogen_src_files;

    /* Libraries. */
    chaz_Lib *shared_lib;
    chaz_Lib *static_lib;
    char     *shared_lib_filename;
    char     *static_lib_filename;
} cfish_MakeFile;

typedef struct SourceFileContext {
    chaz_MakeVar *var;
} SourceFileContext;

static const char cfish_version[]       = "0.5.1";
static const char cfish_major_version[] = "0.5";

static void
S_add_compiler_flags(struct chaz_CLI *cli);

static chaz_CFlags*
S_link_flags(chaz_CLI *cli);

static cfish_MakeFile*
cfish_MakeFile_new(chaz_CLI *cli);

static void
cfish_MakeFile_destroy(cfish_MakeFile *self);

static void
cfish_MakeFile_write(cfish_MakeFile *self, chaz_CFlags *extra_link_flags);

static void
cfish_MakeFile_write_c_cfc_rules(cfish_MakeFile *self);

static void
cfish_MakeFile_write_c_test_rules(cfish_MakeFile *self);

static void
S_c_file_callback(const char *dir, char *file, void *context);

static void
S_cfh_file_callback(const char *dir, char *file, void *context);

static int
S_ends_with(const char *string, const char *postfix);

static int
S_need_libpthread(chaz_CLI *cli);

int main(int argc, const char **argv) {
    chaz_CFlags *link_flags;

    /* Initialize. */
    chaz_CLI *cli
        = chaz_CLI_new(argv[0], "charmonizer: Probe C build environment");
    chaz_CLI_register(cli, "host", "specify host binding language",
                      CHAZ_CLI_ARG_REQUIRED);
    chaz_CLI_register(cli, "disable-threads", "whether to disable threads",
                      CHAZ_CLI_NO_ARG);
    chaz_CLI_set_usage(cli, "Usage: charmonizer [OPTIONS] [-- [CFLAGS]]");
    if (!chaz_Probe_parse_cli_args(argc, argv, cli)) {
        chaz_Probe_die_usage();
    }
    if (!chaz_CLI_defined(cli, "host")) {
        chaz_CLI_set(cli, "host", "c");
    }
    chaz_Probe_init(cli);
    S_add_compiler_flags(cli);

    /* Employ integer features but don't define stdint types in charmony.h. */
    chaz_ConfWriter_append_conf(
        "#define CHY_EMPLOY_INTEGERLIMITS\n"
        "#define CHY_EMPLOY_INTEGERLITERALS\n"
        "#define CHY_EMPLOY_INTEGERFORMATSTRINGS\n\n"
    );

    /* Run probe modules. Booleans, DirManip and LargeFiles are only needed for
     * the Charmonizer tests.
     */
    chaz_BuildEnv_run();
    chaz_DirManip_run();
    chaz_Headers_run();
    chaz_AtomicOps_run();
    chaz_FuncMacro_run();
    chaz_Booleans_run();
    chaz_Integers_run();
    chaz_Floats_run();
    chaz_LargeFiles_run();
    chaz_Memory_run();
    chaz_VariadicMacros_run();

    /* Local definitions. */
    chaz_ConfWriter_start_module("LocalDefinitions");
    if (chaz_HeadCheck_defines_symbol("__sync_bool_compare_and_swap", "")) {
        chaz_ConfWriter_add_def("HAS___SYNC_BOOL_COMPARE_AND_SWAP", NULL);
    }
    link_flags = S_link_flags(cli);
    chaz_ConfWriter_add_def("EXTRA_LDFLAGS",
                            chaz_CFlags_get_string(link_flags));
    chaz_ConfWriter_end_module();

    /* Write custom postamble. */
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_SYS_TYPES_H\n"
        "  #include <sys/types.h>\n"
        "#endif\n\n"
    );
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_ALLOCA_H\n"
        "  #include <alloca.h>\n"
        "#elif defined(CHY_HAS_MALLOC_H)\n"
        "  #include <malloc.h>\n"
        "#elif defined(CHY_ALLOCA_IN_STDLIB_H)\n"
        "  #include <stdlib.h>\n"
        "#endif\n\n"
    );
    chaz_ConfWriter_append_conf(
        "#ifdef CHY_HAS_WINDOWS_H\n"
        "  /* Target Windows XP. */\n"
        "  #ifndef WINVER\n"
        "    #define WINVER 0x0500\n"
        "  #endif\n"
        "  #ifndef _WIN32_WINNT\n"
        "    #define _WIN32_WINNT 0x0500\n"
        "  #endif\n"
        "#endif\n\n"
    );

    if (chaz_CLI_defined(cli, "enable-makefile")) {
        cfish_MakeFile *mf = cfish_MakeFile_new(cli);
        cfish_MakeFile_write(mf, link_flags);
        /* Export filenames. */
        chaz_ConfWriter_add_def("SHARED_LIB_FILENAME",
                                mf->shared_lib_filename);
        chaz_ConfWriter_add_def("STATIC_LIB_FILENAME",
                                mf->static_lib_filename);
        cfish_MakeFile_destroy(mf);
    }

    /* Clean up. */
    chaz_CFlags_destroy(link_flags);
    chaz_CLI_destroy(cli);
    chaz_Probe_clean_up();

    return 0;
}

static void
S_add_compiler_flags(struct chaz_CLI *cli) {
    chaz_CFlags *extra_cflags = chaz_CC_get_extra_cflags();

    if (chaz_Probe_gcc_version_num()) {
        if (getenv("LUCY_VALGRIND")) {
            chaz_CFlags_append(extra_cflags,
                "-DLUCY_VALGRIND -fno-inline-functions");
        }

        chaz_CFlags_append(extra_cflags,
            "-pedantic -Wall -Wextra -Wno-variadic-macros");
        if (strcmp(chaz_CLI_strval(cli, "host"), "perl") == 0) {
            chaz_CFlags_append(extra_cflags, "-DPERL_GCC_PEDANTIC");
        }

        /* Only core source files require this -- not our headers and
         * autogenerated files. */
        chaz_CFlags_append(extra_cflags, "-std=gnu99 -D_GNU_SOURCE");
    }
    else if (chaz_Probe_msvc_version_num()) {
        if (chaz_Probe_msvc_version_num() < 1800) {
            /* Compile as C++ under MSVC11 and below. */
            chaz_CFlags_append(extra_cflags, "/TP");
        }

        chaz_CFlags_append(extra_cflags, "/W3");
        /* Thwart stupid warnings. */
        chaz_CFlags_append(extra_cflags, "/D_CRT_SECURE_NO_WARNINGS");
        chaz_CFlags_append(extra_cflags, "/D_SCL_SECURE_NO_WARNINGS");

        if (chaz_Probe_msvc_version_num() < 1300) {
            /* Redefine 'for' to fix broken 'for' scoping under MSVC6. */
            chaz_CFlags_append(extra_cflags, "/Dfor=\"if(0);else for\"");
        }
    }

    chaz_CFlags_add_define(extra_cflags, "CFP_CFISH", NULL);
    chaz_CFlags_add_define(extra_cflags, "CFP_TESTCFISH", NULL);

    chaz_CFlags_hide_symbols(extra_cflags);

    if (chaz_CLI_defined(cli, "disable-threads")) {
        chaz_CFlags_append(extra_cflags, "-DCFISH_NOTHREADS");
    }
}

static chaz_CFlags*
S_link_flags(chaz_CLI *cli) {
    chaz_CFlags *link_flags   = chaz_CC_new_cflags();
    const char  *math_library = chaz_Floats_math_library();

    if (math_library) {
        chaz_CFlags_add_external_library(link_flags, math_library);
    }
    if (S_need_libpthread(cli)) {
        chaz_CFlags_add_external_library(link_flags, "pthread");
    }
    if (chaz_CLI_defined(cli, "enable-coverage")) {
        chaz_CFlags_enable_code_coverage(link_flags);
    }

    return link_flags;
}

static cfish_MakeFile*
cfish_MakeFile_new(chaz_CLI *cli) {
    const char *dir_sep = chaz_OS_dir_sep();

    cfish_MakeFile *self = malloc(sizeof(cfish_MakeFile));

    self->makefile = chaz_MakeFile_new();
    self->cli      = cli;

    self->base_dir = "..";
    self->core_dir = chaz_Util_join(dir_sep, self->base_dir, "core", NULL);
    self->autogen_src_dir = chaz_Util_join(dir_sep, "autogen", "source", NULL);
    self->autogen_inc_dir
        = chaz_Util_join(dir_sep, "autogen", "include", NULL);
    self->autogen_target
        = chaz_Util_join(dir_sep, "autogen", "hierarchy.json", NULL);

    if (strcmp(chaz_CLI_strval(cli, "host"), "go") == 0) {
        static const char *go_autogen_src_files[] = {
            "cfish_parcel",
            "testcfish_parcel",
            NULL
        };
        self->host_src_dir = "ext";
        self->autogen_src_files = go_autogen_src_files;
    }
    else if (chaz_CLI_defined(cli, "enable-python")) {
        static const char *python_autogen_src_files[] = {
            "cfish_parcel",
            "testcfish_parcel",
            NULL
        };
        self->host_src_dir = "cfext";
        self->autogen_src_files = python_autogen_src_files;
    }
    else if (chaz_CLI_defined(cli, "enable-perl")) {
        static const char *perl_autogen_src_files[] = {
            "boot",
            "callbacks",
            "cfish_parcel",
            "testcfish_parcel",
            NULL
        };
        self->host_src_dir = "xs";
        self->autogen_src_files = perl_autogen_src_files;
    }
    else {
        static const char *c_autogen_src_files[] = {
            "cfish_parcel",
            "testcfish_parcel",
            NULL
        };
        self->host_src_dir = "src";
        self->autogen_src_files = c_autogen_src_files;
    }

    self->shared_lib = chaz_Lib_new("cfish", chaz_Lib_SHARED, cfish_version,
                                    cfish_major_version);
    self->static_lib = chaz_Lib_new("clownfish", chaz_Lib_STATIC, cfish_version,
                                    cfish_major_version);
    self->shared_lib_filename = chaz_Lib_filename(self->shared_lib);
    self->static_lib_filename = chaz_Lib_filename(self->static_lib);

    return self;
}

static void
cfish_MakeFile_destroy(cfish_MakeFile *self) {
    chaz_MakeFile_destroy(self->makefile);

    free(self->core_dir);
    free(self->autogen_inc_dir);
    free(self->autogen_src_dir);
    free(self->autogen_target);

    chaz_Lib_destroy(self->shared_lib);
    chaz_Lib_destroy(self->static_lib);
    free(self->shared_lib_filename);
    free(self->static_lib_filename);

    free(self);
}

static void
cfish_MakeFile_write(cfish_MakeFile *self, chaz_CFlags *extra_link_flags) {
    SourceFileContext sfc;

    const char *dir_sep  = chaz_OS_dir_sep();
    const char *obj_ext  = chaz_CC_obj_ext();

    chaz_MakeVar  *var;
    chaz_MakeRule *rule;
    chaz_MakeRule *clean_rule;
    chaz_MakeRule *distclean_rule;

    chaz_CFlags *extra_cflags = chaz_CC_get_extra_cflags();
    chaz_CFlags *makefile_cflags;
    chaz_CFlags *link_flags;

    char       *scratch;
    int         i;

    printf("Creating Makefile...\n");

    /* Directories */

    chaz_MakeFile_add_var(self->makefile, "BASE_DIR", self->base_dir);

    /* C compiler */

    chaz_MakeFile_add_var(self->makefile, "CC", chaz_CC_get_cc());

    makefile_cflags = chaz_CC_new_cflags();

    chaz_CFlags_enable_optimization(makefile_cflags);
    chaz_CFlags_enable_debugging(makefile_cflags);
    chaz_CFlags_disable_strict_aliasing(makefile_cflags);
    chaz_CFlags_compile_shared_library(makefile_cflags);
    if (chaz_CLI_defined(self->cli, "enable-coverage")) {
        chaz_CFlags_enable_code_coverage(makefile_cflags);
    }

    chaz_CFlags_add_include_dir(makefile_cflags, ".");
    chaz_CFlags_add_include_dir(makefile_cflags, self->core_dir);
    chaz_CFlags_add_include_dir(makefile_cflags, self->host_src_dir);
    chaz_CFlags_add_include_dir(makefile_cflags, self->autogen_inc_dir);

    var = chaz_MakeFile_add_var(self->makefile, "CFLAGS", NULL);
    chaz_MakeVar_append(var, chaz_CFlags_get_string(extra_cflags));
    chaz_MakeVar_append(var, chaz_CFlags_get_string(makefile_cflags));
    chaz_MakeVar_append(var, chaz_CC_get_cflags());

    chaz_CFlags_destroy(makefile_cflags);

    /* Object files */

    var = chaz_MakeFile_add_var(self->makefile, "CLOWNFISH_OBJS", NULL);
    sfc.var = var;
    chaz_Make_list_files(self->host_src_dir, "c", S_c_file_callback, &sfc);
    chaz_Make_list_files(self->core_dir,     "c", S_c_file_callback, &sfc);

    for (i = 0; self->autogen_src_files[i] != NULL; ++i) {
        char *path = chaz_Util_join("", self->autogen_src_dir, dir_sep,
                                    self->autogen_src_files[i], obj_ext, NULL);
        chaz_MakeVar_append(var, path);
        free(path);
    }

    /* Rules */

    chaz_MakeFile_add_rule(self->makefile, "all", self->shared_lib_filename);
    chaz_MakeFile_add_rule(self->makefile, "static", self->static_lib_filename);

    if (strcmp(chaz_CLI_strval(self->cli, "host"), "c") == 0) {
        cfish_MakeFile_write_c_cfc_rules(self);
    }

    /* Needed for parallel builds. */
    for (i = 0; self->autogen_src_files[i] != NULL; ++i) {
        char *path = chaz_Util_join("", self->autogen_src_dir, dir_sep,
                                    self->autogen_src_files[i], ".c", NULL);
        chaz_MakeFile_add_rule(self->makefile, path, self->autogen_target);
        free(path);
    }

    chaz_MakeFile_add_rule(self->makefile, "$(CLOWNFISH_OBJS)",
                           self->autogen_target);

    link_flags = chaz_CC_new_cflags();
    chaz_CFlags_enable_debugging(link_flags);
    chaz_CFlags_append(link_flags, chaz_CFlags_get_string(extra_link_flags));
    chaz_MakeFile_add_shared_lib(self->makefile, self->shared_lib,
                                 "$(CLOWNFISH_OBJS)", link_flags);
    chaz_CFlags_destroy(link_flags);
    chaz_MakeFile_add_static_lib(self->makefile, self->static_lib,
                                 "$(CLOWNFISH_OBJS)");

    if (strcmp(chaz_CLI_strval(self->cli, "host"), "c") == 0) {
        cfish_MakeFile_write_c_test_rules(self);
    }

    clean_rule = chaz_MakeFile_clean_rule(self->makefile);
    chaz_MakeRule_add_rm_command(clean_rule, "$(CLOWNFISH_OBJS)");
    chaz_MakeRule_add_recursive_rm_command(clean_rule, "autogen");

    chaz_MakeFile_write(self->makefile);
}

static void
cfish_MakeFile_write_c_cfc_rules(cfish_MakeFile *self) {
    SourceFileContext sfc;
    chaz_MakeVar  *var;
    chaz_MakeRule *rule;

    const char *dir_sep  = chaz_OS_dir_sep();
    const char *exe_ext  = chaz_OS_exe_ext();

    char *cfc_dir;
    char *cfc_exe;
    char *cfc_command;

    cfc_dir = chaz_Util_join(dir_sep, self->base_dir, "..", "compiler", "c",
                             NULL);
    cfc_exe = chaz_Util_join("", cfc_dir, dir_sep, "cfc", exe_ext, NULL);

    rule = chaz_MakeFile_add_rule(self->makefile, cfc_exe, NULL);
    chaz_MakeRule_add_make_command(rule, cfc_dir, NULL);

    var = chaz_MakeFile_add_var(self->makefile, "CLOWNFISH_HEADERS", NULL);
    sfc.var = var;
    chaz_Make_list_files(self->core_dir, "cfh", S_cfh_file_callback, &sfc);

    rule = chaz_MakeFile_add_rule(self->makefile, self->autogen_target, cfc_exe);
    chaz_MakeRule_add_prereq(rule, "$(CLOWNFISH_HEADERS)");
    cfc_command = chaz_Util_join("", cfc_exe, " --source=", self->core_dir,
                                 " --dest=autogen --header=cfc_header", NULL);
    chaz_MakeRule_add_command(rule, cfc_command);

    rule = chaz_MakeFile_clean_rule(self->makefile);
    chaz_MakeRule_add_make_command(rule, cfc_dir, "clean");

    rule = chaz_MakeFile_distclean_rule(self->makefile);
    chaz_MakeRule_add_make_command(rule, cfc_dir, "distclean");

    free(cfc_dir);
    free(cfc_exe);
    free(cfc_command);
}

static void
cfish_MakeFile_write_c_test_rules(cfish_MakeFile *self) {
    const char *dir_sep  = chaz_OS_dir_sep();
    const char *exe_ext  = chaz_OS_exe_ext();

    chaz_CFlags   *test_cflags;
    chaz_MakeRule *rule;
    char          *test_cfish_exe;
    char          *test_cfish_c;
    char          *test_command;

    test_cfish_exe = chaz_Util_join("", "t", dir_sep, "test_cfish", exe_ext,
                                    NULL);
    test_cfish_c = chaz_Util_join(dir_sep, "t", "test_cfish.c", NULL);
    test_cflags = chaz_CC_new_cflags();
    chaz_CFlags_enable_optimization(test_cflags);
    chaz_CFlags_add_include_dir(test_cflags, self->autogen_inc_dir);
    chaz_CFlags_add_library(test_cflags, self->shared_lib);
    rule = chaz_MakeFile_add_compiled_exe(self->makefile, test_cfish_exe,
                                          test_cfish_c, test_cflags);
    chaz_MakeRule_add_prereq(rule, self->shared_lib_filename);
    chaz_CFlags_destroy(test_cflags);

    /* TODO: This should be added by Charmonizer. */
    if (chaz_Probe_msvc_version_num()) {
        rule = chaz_MakeFile_clean_rule(self->makefile);
        chaz_MakeRule_add_rm_command(rule, "test_cfish.obj");
    }

    rule = chaz_MakeFile_add_rule(self->makefile, "test", test_cfish_exe);
    if (strcmp(chaz_OS_shared_lib_ext(), ".so") == 0) {
        test_command = chaz_Util_join(" ", "LD_LIBRARY_PATH=.", test_cfish_exe,
                                      NULL);
    }
    else {
        test_command = chaz_Util_strdup(test_cfish_exe);
    }
    chaz_MakeRule_add_command(rule, test_command);

    if (chaz_CLI_defined(self->cli, "enable-coverage")) {
        rule = chaz_MakeFile_add_rule(self->makefile, "coverage",
                                      test_cfish_exe);
        chaz_MakeRule_add_command(rule,
                                  "lcov"
                                  " --zerocounters"
                                  " --directory $(BASE_DIR)");
        chaz_MakeRule_add_command(rule, test_command);
        chaz_MakeRule_add_command(rule,
                                  "lcov"
                                  " --capture"
                                  " --directory $(BASE_DIR)"
                                  " --base-directory ."
                                  " --rc lcov_branch_coverage=1"
                                  " --output-file clownfish.info");
        chaz_MakeRule_add_command(rule,
                                  "lcov"
                                  " --remove clownfish.info"
                                  " '/usr/include/*'"
                                  " 'c/autogen/*'"
                                  " 'core/Clownfish/Test.*'"
                                  " 'core/Clownfish/Test/*'"
                                  " 'core/TestClownfish.*'"
                                  " --rc lcov_branch_coverage=1"
                                  " --output-file clownfish.info");
        chaz_MakeRule_add_command(rule,
                                  "genhtml"
                                  " --branch-coverage"
                                  " --output-directory coverage"
                                  " clownfish.info");

        rule = chaz_MakeFile_clean_rule(self->makefile);
        chaz_MakeRule_add_rm_command(rule, "clownfish.info");
        chaz_MakeRule_add_recursive_rm_command(rule, "coverage");
    }

    free(test_cfish_exe);
    free(test_cfish_c);
    free(test_command);
}

static void
S_c_file_callback(const char *dir, char *file, void *context) {
    SourceFileContext *sfc = (SourceFileContext*)context;
    const char *dir_sep = chaz_OS_dir_sep();
    const char *obj_ext = chaz_CC_obj_ext();
    size_t file_len = strlen(file);
    char *obj_file;

    /* Strip extension */
    if (!S_ends_with(file, ".c")) {
        chaz_Util_warn("Unexpected C filename: %s", file);
        return;
    }
    file[file_len-2] = '\0';

    obj_file = chaz_Util_join("", dir, dir_sep, file, obj_ext, NULL);
    chaz_MakeVar_append(sfc->var, obj_file);
    free(obj_file);
}

static void
S_cfh_file_callback(const char *dir, char *file, void *context) {
    SourceFileContext *sfc = (SourceFileContext*)context;
    const char *dir_sep = chaz_OS_dir_sep();
    char *cfh_file;

    if (!S_ends_with(file, ".cfh")) {
        chaz_Util_warn("Unexpected Clownfish header filename: %s", file);
        return;
    }

    cfh_file = chaz_Util_join(dir_sep, dir, file, NULL);
    chaz_MakeVar_append(sfc->var, cfh_file);
    free(cfh_file);
}

static int
S_ends_with(const char *string, const char *postfix) {
    size_t len         = strlen(string);
    size_t postfix_len = strlen(postfix);
    return len >= postfix_len
           && memcmp(string + len - postfix_len, postfix, postfix_len) == 0;
}

static int
S_need_libpthread(chaz_CLI *cli) {
    static const char source[] =
        "#include <pthread.h>\n"
        "\n"
        "int main() {\n"
        "    pthread_create(0, 0, 0, 0);\n"
        "    pthread_key_create(0, 0);\n"
        "    return 0;\n"
        "}\n";
    chaz_CFlags *temp_cflags;

    if (chaz_CLI_defined(cli, "disable-threads")
        || chaz_HeadCheck_check_header("windows.h")
    ) {
        return 0;
    }

    if (!chaz_HeadCheck_check_header("pthread.h")) {
        chaz_Util_die("pthread.h not found. Try --disable-threads.");
    }

    if (chaz_CC_test_link(source)) {
        return 0;
    }

    temp_cflags = chaz_CC_get_temp_cflags();
    chaz_CFlags_add_external_library(temp_cflags, "pthread");
    if (!chaz_CC_test_link(source)) {
        chaz_Util_die("Can't link with libpthread. Try --disable-threads.");
    }
    chaz_CFlags_clear(temp_cflags);

    return 1;
}

