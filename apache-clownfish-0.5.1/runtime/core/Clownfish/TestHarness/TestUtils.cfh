/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

__C__

typedef void (*cfish_thread_routine_t)(void *arg);

typedef struct cfish_Thread cfish_Thread;

__END_C__

inert class Clownfish::TestHarness::TestUtils  {

    inert bool has_threads;

    /** Testing-only String factory which uses strlen().
     */
    inert incremented String*
    get_str(const char *utf8);

    /** Return a random unsigned 64-bit integer.
     */
    inert uint64_t
    random_u64();

    /** Return an array of `count` random 64-bit integers where
     * <code>min <= n < limit</code>.
     *
     * If `buf` is NULL, it will be allocated, otherwise it will
     * be used.
     */
    inert int64_t*
    random_i64s(int64_t *buf, size_t count, int64_t min, int64_t limit);

    /** Return an array of `count` random unsigned, 64-bit integers
     * where <code>min <= n < limit</code>.
     *
     * If `buf` is NULL, it will be allocated, otherwise it will
     * be used.
     */
    inert uint64_t*
    random_u64s(uint64_t *buf, size_t count, uint64_t min, uint64_t limit);

    /** Return an array of `count` random double-precision floating
     * point numbers between 0 and 1.
     *
     * If `buf` is NULL, it will be allocated, otherwise it will
     * be used.
     */
    inert double*
    random_f64s(double *buf, size_t count);

    /** Return a string with a random (legal) sequence of code points.
     * @param length Length of the string in code points.
     */
    inert incremented String*
    random_string(size_t length);

    /** Time in microseconds since the system-dependent epoch.
     */
    inert uint64_t
    time();

    inert void
    usleep(uint64_t microseconds);

    inert cfish_Thread*
    thread_create(cfish_thread_routine_t routine, void *arg,
                  void *host_runtime);

    inert void
    thread_yield();

    inert void
    thread_join(cfish_Thread *thread);

    inert void*
    clone_host_runtime();

    inert void
    set_host_runtime(void *runtime);

    inert void
    destroy_host_runtime(void *runtime);
}

__C__

#ifdef CFISH_USE_SHORT_NAMES
  #define Thread                cfish_Thread
  #define thread_routine_t      cfish_thread_routine_t
#endif

__END_C__


