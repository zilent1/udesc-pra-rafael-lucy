/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/**
 * Hashtable Iterator.
 */

public final class Clownfish::HashIterator nickname HashIter
    inherits Clownfish::Obj {

    Hash   *hash;
    size_t  tick;
    size_t  capacity;

    inert void
    init_class();

    /** Return a HashIterator for `hash`.
     */
    public inert incremented HashIterator*
    new(Hash *hash);

    /** Initialize a HashIterator for `hash`.
     */
    public inert HashIterator*
    init(HashIterator *self, Hash *hash);

    /** Advance the iterator to the next key-value pair.
     *
     * @return true if there's another key-value pair, false if the iterator
     * is exhausted.
     */
    public bool
    Next(HashIterator *self);

    /** Return the key of the current key-value pair.  It's not allowed to
     * call this method before [](.Next) was called for the first time or
     * after the iterator was exhausted.
     */
    public String*
    Get_Key(HashIterator *self);

    /** Return the value of the current key-value pair.  It's not allowed to
     * call this method before [](.Next) was called for the first time or
     * after the iterator was exhausted.
     */
    public nullable Obj*
    Get_Value(HashIterator *self);

    public void
    Destroy(HashIterator *self);
}
