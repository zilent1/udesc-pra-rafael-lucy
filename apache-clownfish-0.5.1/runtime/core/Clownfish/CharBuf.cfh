/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/**
 * Growable buffer holding Unicode characters.
 */

public final class Clownfish::CharBuf nickname CB
    inherits Clownfish::Obj {

    char    *ptr;
    size_t   size;
    size_t   cap;  /* allocated bytes */

    /** Return a new CharBuf.
     *
     * @param capacity Initial minimum capacity of the CharBuf, in bytes.
     */
    public inert incremented CharBuf*
    new(size_t capacity = 0);

    /** Initialize a CharBuf.
     *
     * @param capacity Initial minimum capacity of the CharBuf, in bytes.
     */
    public inert CharBuf*
    init(CharBuf *self, size_t capacity = 0);

    /** Concatenate the passed-in string onto the end of the CharBuf.
     *
     * @param utf8 Pointer to UTF-8 character data.
     * @param size Size of UTF-8 character data in bytes.
     */
    public void
    Cat_Utf8(CharBuf *self, const char *utf8, size_t size);

    /** Concatenate the supplied text onto the end of the CharBuf.  Don't
     * check for UTF-8 validity.
     *
     * @param utf8 Pointer to UTF-8 character data.
     * @param size Size of UTF-8 character data in bytes.
     */
    public void
    Cat_Trusted_Utf8(CharBuf *self, const char *utf8, size_t size);

    /** Concatenate the contents of [](String) `string` onto the end of the
     * caller.
     *
     * @param string The String to concatenate.
     */
    public void
    Cat(CharBuf *self, String *string);

    /** Concatenate formatted arguments.  Similar to the printf family, but
     * only accepts minimal options (just enough for decent error messages).
     *
     *     Objects:  %o
     *     char*:    %s
     *     integers: %i8 %i32 %i64 %u8 %u32 %u64
     *     floats:   %f64
     *     hex:      %x32
     *
     * Note that all Clownfish Objects, including Strings, are printed via
     * `%o` (which invokes [](Obj.To_String)).
     *
     * @param pattern The format string.
     * @param args A `va_list` containing the arguments.
     */
    public void
    VCatF(CharBuf *self, const char *pattern, va_list args);

    /** Invokes [](.VCatF) to concatenate formatted arguments.  Note that this
     * is only a function and not a method.
     *
     * @param pattern The format string.
     */
    public inert void
    catf(CharBuf *self, const char *pattern, ...);

    /** Concatenate one Unicode character onto the end of the CharBuf.
     *
     * @param code_point The code point of the Unicode character.
     */
    public void
    Cat_Char(CharBuf *self, int32_t code_point);

    /** Assign more memory to the CharBuf, if it doesn't already have enough
     * room to hold a string of `size` bytes.  Cannot shrink the
     * allocation.
     *
     * @param capacity The new minimum capacity of the ByteBuf.
     */
    public void
    Grow(CharBuf *self, size_t capacity);

    /** Clear the CharBuf.
     */
    public void
    Clear(CharBuf *self);

    /** Return the size of the CharBuf's content in bytes.
     */
    public size_t
    Get_Size(CharBuf *self);

    public incremented CharBuf*
    Clone(CharBuf *self);

    /** Return the content of the CharBuf as String.
     */
    public incremented String*
    To_String(CharBuf *self);

    /** Return the content of the CharBuf as [](String) and clear the CharBuf.
     * This is more efficient than [](.To_String).
     */
    public incremented String*
    Yield_String(CharBuf *self);

    public void
    Destroy(CharBuf *self);
}


