/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/**
 * Growable buffer holding arbitrary bytes.
 */

public final class Clownfish::ByteBuf nickname BB inherits Clownfish::Obj {

    char    *buf;
    size_t   size;  /* number of valid bytes */
    size_t   cap;   /* allocated bytes */

    /** Return a new zero-sized ByteBuf.
     *
     * @param capacity Initial minimum capacity of the ByteBuf, in bytes.
     */
    public inert incremented ByteBuf*
    new(size_t capacity = 0);

    /** Initialize a ByteBuf.
     *
     * @param capacity Initial minimum capacity of the ByteBuf, in bytes.
     */
    public inert ByteBuf*
    init(ByteBuf *self, size_t capacity = 0);

    /** Return a new ByteBuf which holds a copy of the passed-in bytes.
     *
     * @param bytes Pointer to an array of bytes.
     * @param size Size of the array in bytes.
     */
    public inert incremented ByteBuf*
    new_bytes(const void *bytes, size_t size);

    /** Initialize a ByteBuf which holds a copy of the passed-in bytes.
     *
     * @param bytes Pointer to an array of bytes.
     * @param size Size of the array in bytes.
     */
    public inert ByteBuf*
    init_bytes(ByteBuf *self, const void *bytes, size_t size);

    /** Return a new ByteBuf which assumes ownership of the passed-in string.
     *
     * @param bytes Pointer to an array of bytes.
     * @param size Initial size of the ByteBuf in bytes.
     * @param capacity Total allocated bytes in the array.
     */
    public inert incremented ByteBuf*
    new_steal_bytes(void *bytes, size_t size, size_t capacity);

    /** Initialize a ByteBuf and assume ownership of the passed-in string.
     *
     * @param bytes Pointer to an array of bytes.
     * @param size Initial size of the ByteBuf in bytes.
     * @param capacity Total allocated bytes in the array.
     */
    public inert ByteBuf*
    init_steal_bytes(ByteBuf *self, void *bytes, size_t size,
                     size_t capacity);

    void*
    To_Host(ByteBuf *self);

    /** Resize the ByteBuf to `size`.  If greater than the object's capacity,
     * throws an error.
     */
    public void
    Set_Size(ByteBuf *self, size_t size);

    /** Return the size of the ByteBuf in bytes.
     */
    public size_t
    Get_Size(ByteBuf *self);

    /** Accessor for raw internal buffer.
     */
    public nullable char*
    Get_Buf(ByteBuf *self);

    /** Return the number of bytes in the ByteBuf's allocation.
     */
    public size_t
    Get_Capacity(ByteBuf *self);

    /** Concatenate the passed-in bytes onto the end of the ByteBuf. Allocate
     * more memory as needed.
     *
     * @param bytes Pointer to an array of bytes.
     * @param size Size of the array in bytes.
     */
    public void
    Cat_Bytes(ByteBuf *self, const void *bytes, size_t size);

    /** Concatenate the contents of [](Blob) `blob` onto the end of the
     * original ByteBuf. Allocate more memory as needed.
     */
    public void
    Cat(ByteBuf *self, Blob *blob);

    /** Assign more memory to the ByteBuf, if it doesn't already have enough
     * room to hold `capacity` bytes.  Cannot shrink the allocation.
     *
     * @param capacity The new minimum capacity of the ByteBuf.
     * @return a pointer to the raw buffer.
     */
    public nullable char*
    Grow(ByteBuf *self, size_t capacity);

    /** Return the content of the ByteBuf as [](Blob) and clear the ByteBuf.
     */
    public incremented Blob*
    Yield_Blob(ByteBuf *self);

    /** Return a String which holds a copy of the UTF-8 character data in
     * the ByteBuf after checking for validity.
     */
    public incremented String*
    Utf8_To_String(ByteBuf *self);

    /** Return a String which holds a copy of the UTF-8 character data in
     * the ByteBuf, skipping validity checks.
     */
    public incremented String*
    Trusted_Utf8_To_String(ByteBuf *self);

    /** Equality test.
     *
     * @return true if `other` is a ByteBuf with the same content as `self`.
     */
    public bool
    Equals(ByteBuf *self, Obj *other);

    /** Test whether the ByteBuf matches the passed-in bytes.
     *
     * @param bytes Pointer to an array of bytes.
     * @param size Size of the array in bytes.
     */
    public bool
    Equals_Bytes(ByteBuf *self, const void *bytes, size_t size);

    /** Indicate whether one ByteBuf is less than, equal to, or greater than
     * another.  The byte contents of the ByteBufs are compared
     * lexicographically.  Throws an exception if `other` is not a ByteBuf.
     *
     * @return 0 if the ByteBufs are equal, a negative number if `self` is
     * less than `other`, and a positive number if `self` is greater than
     * `other`.
     */
    public int32_t
    Compare_To(ByteBuf *self, Obj *other);

    public incremented ByteBuf*
    Clone(ByteBuf *self);

    public void
    Destroy(ByteBuf *self);
}


