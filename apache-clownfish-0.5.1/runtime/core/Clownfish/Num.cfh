/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

/** Immutable double precision floating point number.
 */
public final class Clownfish::Float {

    double value;

    /** Return a new Float.
     *
     * @param value Initial value.
     */
    public inert Float*
    new(double value);

    /** Initialize a Float.
     *
     * @param value Initial value.
     */
    public inert Float*
    init(Float* self, double value);

    void*
    To_Host(Float *self);

    /** Return the value of the Float.
     */
    public double
    Get_Value(Float *self);

    /** Convert the Float to an integer, truncating toward zero.  Throw an
     * exception if the value is out of the range of an `int64_t`.
     */
    public int64_t
    To_I64(Float *self);

    /** Return the Float formatted as String using `sprintf` with conversion
     * specifier `%g`.
     */
    public incremented String*
    To_String(Float *self);

    /** Indicate whether two numbers are the same.
     *
     * @return true if `other` is a Float or Integer with the same value as
     * `self`.
     */
    public bool
    Equals(Float *self, Obj *other);

    /** Indicate whether one number is less than, equal to, or greater than
     * another.  Throws an exception if `other` is neither a Float nor an
     * Integer.
     *
     * @return 0 if the numbers are equal, a negative number if `self` is
     * less than `other`, and a positive number if `self` is greater than
     * `other`.
     */
    public int32_t
    Compare_To(Float *self, Obj *other);

    public incremented Float*
    Clone(Float *self);
}

/**
 * Immutable 64-bit signed integer.
 */
public final class Clownfish::Integer nickname Int {

    int64_t value;

    /** Return a new Integer.
     *
     * @param value Initial value.
     */
    public inert Integer*
    new(int64_t value);

    /** Initialize an Integer.
     *
     * @param value Initial value.
     */
    public inert Integer*
    init(Integer* self, int64_t value);

    void*
    To_Host(Integer *self);

    /** Return the value of the Integer.
     */
    public int64_t
    Get_Value(Integer *self);

    /** Convert the Integer to floating point.
     */
    public double
    To_F64(Integer *self);

    /** Return the Integer formatted as String.
     */
    public incremented String*
    To_String(Integer *self);

    /** Indicate whether two numbers are the same.
     *
     * @return true if `other` is an Integer or Float with the same value as
     * `self`.
     */
    public bool
    Equals(Integer *self, Obj *other);

    /** Indicate whether one number is less than, equal to, or greater than
     * another.  Throws an exception if `other` is neither an Integer nor a
     * Float.
     *
     * @return 0 if the numbers are equal, a negative number if `self` is
     * less than `other`, and a positive number if `self` is greater than
     * `other`.
     */
    public int32_t
    Compare_To(Integer *self, Obj *other);

    public incremented Integer*
    Clone(Integer *self);
}


