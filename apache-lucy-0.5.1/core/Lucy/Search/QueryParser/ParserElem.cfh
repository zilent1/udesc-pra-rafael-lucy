/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Lucy;

/** Private utility class.
 */
class Lucy::Search::QueryParser::ParserElem inherits Clownfish::Obj {

    uint32_t  type;
    uint32_t  occur;
    Obj      *value;

    inert incremented ParserElem*
    new(uint32_t type, decremented Obj *value = NULL);

    inert ParserElem*
    init(ParserElem *self, uint32_t type, decremented Obj *value = NULL);

    public void
    Destroy(ParserElem *self);

    void
    Set_Value(ParserElem *self, Obj *value);

    /** Return the value of the elem if it matches the specification, NULL
     * otherwise.
     */
    nullable Obj*
    As(ParserElem *self, Class *klass);

    uint32_t
    Get_Type(ParserElem *self);

    /** Manipulate the value of `occur` so that the element becomes
     * forbidden.
     */
    void
    Negate(ParserElem *self);

    /** Manipulate the value of `occur` so that the element becomes
     * required.
     */
    void
    Require(ParserElem *self);

    /** If an element is required, make it optional.  If it's negated, leave
     * it as is.
     */
    void
    Unrequire(ParserElem *self);

    /** Return true if the element MUST be present.
     */
    bool
    Required(ParserElem *self);

    /** Return true if the element SHOULD be present.
     */
    bool
    Optional(ParserElem *self);

    /** Return true if the element MUST NOT be present.
     */
    bool
    Negated(ParserElem *self);
}

