/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Lucy;

/** A simple analyzer chain.
 *
 * EasyAnalyzer is an analyzer chain consisting of a
 * [](cfish:StandardTokenizer), a
 * [](cfish:Normalizer), and a
 * [](cfish:SnowballStemmer).
 *
 * Supported languages:
 *
 *     en => English,
 *     da => Danish,
 *     de => German,
 *     es => Spanish,
 *     fi => Finnish,
 *     fr => French,
 *     hu => Hungarian,
 *     it => Italian,
 *     nl => Dutch,
 *     no => Norwegian,
 *     pt => Portuguese,
 *     ro => Romanian,
 *     ru => Russian,
 *     sv => Swedish,
 *     tr => Turkish,
 */
public class Lucy::Analysis::EasyAnalyzer inherits Lucy::Analysis::Analyzer {

    String *language;
    StandardTokenizer *tokenizer;
    Normalizer *normalizer;
    SnowballStemmer *stemmer;

    /** Create a new EasyAnalyzer.
     *
     * @param language An ISO code from the list of supported languages.
     */
    public inert incremented EasyAnalyzer*
    new(String *language = NULL);

    /** Initialize an EasyAnalyzer.
     *
     * @param language An ISO code from the list of supported languages.
     */
    public inert EasyAnalyzer*
    init(EasyAnalyzer *self, String *language = NULL);

    public incremented Inversion*
    Transform(EasyAnalyzer *self, Inversion *inversion);

    public incremented Inversion*
    Transform_Text(EasyAnalyzer *self, String *text);

    public incremented Hash*
    Dump(EasyAnalyzer *self);

    public incremented EasyAnalyzer*
    Load(EasyAnalyzer *self, Obj *dump);

    public bool
    Equals(EasyAnalyzer *self, Obj *other);

    public void
    Destroy(EasyAnalyzer *self);
}


